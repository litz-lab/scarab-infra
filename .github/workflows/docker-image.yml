name: Build and Publish Docker Image CI

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
    contents: write
    packages: write
    pull-requests: write

jobs:
  build-and-publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set current GIT_HASH
        id: current_hash
        run: echo "githash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Read last built tag from last_built_tag.txt
        id: last_tag
        run: |
          if [[ -f last_built_tag.txt ]]; then
            TAG=$(cat last_built_tag.txt)
            echo "Found last built tag: $TAG"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "No last_built_tag.txt found, assuming first build."
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Check if relevant directories changed since last build
        id: changes
        env:
          LAST_TAG: ${{ steps.last_tag.outputs.tag }}
        run: |
          if [[ -z "$LAST_TAG" ]]; then
            echo "No previous tag â€” assuming first build."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            git fetch origin main --depth=50
            CHANGED=$(git diff --name-only "$LAST_TAG" HEAD | grep -E '^(common/|workloads/allbench_traces/)' || true)
            if [[ -n "$CHANGED" ]]; then
              echo "Relevant changes detected:"
              echo "$CHANGED"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "No relevant changes detected."
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Log in to GitHub Container Registry
        if: steps.changes.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        if: steps.changes.outputs.changed == 'true'
        run: |
          docker build . \
          --file ./workloads/allbench_traces/Dockerfile \
          --no-cache \
          --tag ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ steps.current_hash.outputs.githash }}

      - name: Push Docker image to GitHub Packages
        if: steps.changes.outputs.changed == 'true'
        run: |
          # Only push if this is not a manual trigger
          if [[ "${{ github.event_name }}" == "push" ]]; then
            docker push ghcr.io/litz-lab/scarab-infra/allbench_traces:${{ steps.current_hash.outputs.githash }}
          else
            echo "Skipping pushing the image to GitHub Packages because this is a manual run (workflow_dispatch)"
          fi

      - name: Save short GIT_HASH to last_built_tag.txt
        if: steps.changes.outputs.changed == 'true'
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "Saving GIT_HASH: $SHORT_HASH"
          echo "$SHORT_HASH" > last_built_tag.txt

      - name: Create and auto-merge PR
        if: steps.changes.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          set -e

          BRANCH_NAME=auto/update-tag-${{ steps.current_hash.outputs.githash }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b $BRANCH_NAME
          git add last_built_tag.txt
          git commit -m "Auto update Docker image tag to $BRANCH_NAME"
          git push origin $BRANCH_NAME

          # Create PR using jq-based JSON payload
          PR_PAYLOAD=$(jq -n \
            --arg title "Auto-generated PR" \
            --arg head "$BRANCH_NAME" \
            --arg base "main" \
            --arg body "This is a PR created to update Docker image tag." \
            '{title: $title, head: $head, base: $base, body: $body}')

          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$PR_PAYLOAD" \
            https://api.github.com/repos/$GITHUB_REPO/pulls)

          echo "PR creation response:"
          echo "$PR_RESPONSE"

          # After you create the PR, capture both number and node_id
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r .number)
          PR_NODE_ID=$(echo "$PR_RESPONSE" | jq -r .node_id)

          if [[ "$PR_NUMBER" == "null" || -z "$PR_NUMBER" || "$PR_NODE_ID" == "null" || -z "$PR_NODE_ID" ]]; then
            echo "Failed to create PR or get node_id. Exiting."
            exit 1
          fi

          echo "Created PR #$PR_NUMBER"

          # Optional small delay to let GitHub index the PR
          sleep 5

          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Enabling auto-merge for PR #$PR_NUMBER"

            read -r -d '' GQL_QUERY <<'EOF'
            mutation($prId: ID!) {
              enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) {
                pullRequest { number, autoMergeRequest { enabledAt } }
              }
            }
          EOF

            curl -s -X POST https://api.github.com/graphql \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "$(jq -n --arg prId "$PR_NODE_ID" --arg q "$GQL_QUERY" '{query:$q,variables:{prId:$prId}}')" \
            | tee enable_automerge_response.json

            # Basic success check
            if jq -e '.data.enablePullRequestAutoMerge.pullRequest.autoMergeRequest.enabledAt' enable_automerge_response.json >/dev/null; then
              echo "Auto-merge enabled."
            else
              echo "Failed to enable auto-merge:"
              cat enable_automerge_response.json
              exit 1
            fi
          else
            echo "Skipping auto-merge because this is a manual run (workflow_dispatch)"
          fi
